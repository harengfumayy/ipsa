def Point_Fixe(g, x0, epsilon, Nitermax):
    p_n = []
    p_xn = []
    p_en = []
    n=0
    xold = x0
    erreur = g(xold) - xold
    while abs(erreur)>epsilon and n<Nitermax:
        xnew = g(xold)
        erreur = xnew - xold
        xold = xnew
        #print(n)
        p_n.append(n)
        p_xn.append(xnew)
        p_en.append(abs(erreur))
        n+=1
    return p_n, p_xn, p_en 

"""___Newton___"""
def Newton(f, fder, x0, epsilon, Nitermax):
    n_n = []
    n_xn = []
    n_en = []
    n=0
    xold = x0
    erreur = f(xold) - xold
    while abs(erreur)>epsilon and n<Nitermax:
        xnew = xold - (f(xold)/fder(xold))
        erreur = xnew - xold
        xold = xnew
        #print(n)
        n_n.append(n)
        n_xn.append(xnew)
        n_en.append(abs(erreur))
        n+=1
    return n_n, n_xn, n_en 

"""___dichotomie___"""

def Dichotomie(f, a0, b0, epsilon, Nitermax):
    d_n = []
    d_xn = []
    d_en = []
    n=0
    while abs(b0 - a0) > epsilon and n<Nitermax:
        m = (a0 + b0) / 2
        if (f(a0)*f(m) <= 0):
           b0 = m
           d_n.append(n)
           d_xn.append(b0)
           d_en.append(abs(b0 - a0))
           n = n + 1
           #print(n)
        else:
           a0 = m
           d_n.append(n)
           d_xn.append(a0)
           d_en.append(abs(b0 - a0))
           n = n + 1
           #print(n)
    return d_n, d_xn, d_en


"""___sÃ©cante___"""

def Secante(f, x0, x1, epsilon, Nitermax):
    s_n = []
    s_xn = []
    s_en = []
    n=0
    while (abs(x1 - x0) > epsilon) and n<Nitermax:
        x2 = x1 - f(x1) * (x1 - x0) / float(f(x1) - f(x0))
        x0, x1 = x1, x2
        n = n + 1
        #print(n)
        s_n.append(n)
        s_xn.append(x2)
        s_en.append(abs(x1 - x0))
    return s_n, s_xn, s_en
